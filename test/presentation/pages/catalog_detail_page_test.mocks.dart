// Mocks generated by Mockito 5.4.4 from annotations
// in ditonton/test/presentation/pages/catalog_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:bloc/bloc.dart' as _i11;
import 'package:ditonton/domain/usecases/get_detail.dart' as _i2;
import 'package:ditonton/domain/usecases/get_recommendations.dart' as _i3;
import 'package:ditonton/domain/usecases/get_watchlist_status.dart' as _i4;
import 'package:ditonton/domain/usecases/remove_watchlist.dart' as _i6;
import 'package:ditonton/domain/usecases/save_watchlist.dart' as _i5;
import 'package:ditonton/presentation/bloc/detail/catalog_detail_bloc.dart'
    as _i8;
import 'package:ditonton/presentation/bloc/detail/catalog_detail_event.dart'
    as _i10;
import 'package:ditonton/presentation/bloc/detail/catalog_detail_state.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetDetail_0 extends _i1.SmartFake implements _i2.GetDetail {
  _FakeGetDetail_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetRecommendations_1 extends _i1.SmartFake
    implements _i3.GetRecommendations {
  _FakeGetRecommendations_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWatchListStatus_2 extends _i1.SmartFake
    implements _i4.GetWatchListStatus {
  _FakeGetWatchListStatus_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSaveWatchlist_3 extends _i1.SmartFake implements _i5.SaveWatchlist {
  _FakeSaveWatchlist_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoveWatchlist_4 extends _i1.SmartFake
    implements _i6.RemoveWatchlist {
  _FakeRemoveWatchlist_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCatalogDetailState_5 extends _i1.SmartFake
    implements _i7.CatalogDetailState {
  _FakeCatalogDetailState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CatalogDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCatalogDetailBloc extends _i1.Mock implements _i8.CatalogDetailBloc {
  @override
  _i2.GetDetail get getDetail => (super.noSuchMethod(
        Invocation.getter(#getDetail),
        returnValue: _FakeGetDetail_0(
          this,
          Invocation.getter(#getDetail),
        ),
        returnValueForMissingStub: _FakeGetDetail_0(
          this,
          Invocation.getter(#getDetail),
        ),
      ) as _i2.GetDetail);

  @override
  _i3.GetRecommendations get getRecommendations => (super.noSuchMethod(
        Invocation.getter(#getRecommendations),
        returnValue: _FakeGetRecommendations_1(
          this,
          Invocation.getter(#getRecommendations),
        ),
        returnValueForMissingStub: _FakeGetRecommendations_1(
          this,
          Invocation.getter(#getRecommendations),
        ),
      ) as _i3.GetRecommendations);

  @override
  _i4.GetWatchListStatus get getWatchListStatus => (super.noSuchMethod(
        Invocation.getter(#getWatchListStatus),
        returnValue: _FakeGetWatchListStatus_2(
          this,
          Invocation.getter(#getWatchListStatus),
        ),
        returnValueForMissingStub: _FakeGetWatchListStatus_2(
          this,
          Invocation.getter(#getWatchListStatus),
        ),
      ) as _i4.GetWatchListStatus);

  @override
  _i5.SaveWatchlist get saveWatchlist => (super.noSuchMethod(
        Invocation.getter(#saveWatchlist),
        returnValue: _FakeSaveWatchlist_3(
          this,
          Invocation.getter(#saveWatchlist),
        ),
        returnValueForMissingStub: _FakeSaveWatchlist_3(
          this,
          Invocation.getter(#saveWatchlist),
        ),
      ) as _i5.SaveWatchlist);

  @override
  _i6.RemoveWatchlist get removeWatchlist => (super.noSuchMethod(
        Invocation.getter(#removeWatchlist),
        returnValue: _FakeRemoveWatchlist_4(
          this,
          Invocation.getter(#removeWatchlist),
        ),
        returnValueForMissingStub: _FakeRemoveWatchlist_4(
          this,
          Invocation.getter(#removeWatchlist),
        ),
      ) as _i6.RemoveWatchlist);

  @override
  _i7.CatalogDetailState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCatalogDetailState_5(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeCatalogDetailState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.CatalogDetailState);

  @override
  _i9.Stream<_i7.CatalogDetailState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i7.CatalogDetailState>.empty(),
        returnValueForMissingStub: _i9.Stream<_i7.CatalogDetailState>.empty(),
      ) as _i9.Stream<_i7.CatalogDetailState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i10.CatalogDetailEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i10.CatalogDetailEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i7.CatalogDetailState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i10.CatalogDetailEvent>(
    _i11.EventHandler<E, _i7.CatalogDetailState>? handler, {
    _i11.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i11.Transition<_i10.CatalogDetailEvent, _i7.CatalogDetailState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void onChange(_i11.Change<_i7.CatalogDetailState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
